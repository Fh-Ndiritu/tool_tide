# This file is auto-generated by the `rails generate rspec:install` command.
# It's intended to be used with specs that are Rails-aware.
#
# The following line is provided for convenience purposes. It has the downside
# of increasing the boot-up time by auto-requiring all files in the support
# directory. Alternatively, in the individual `_spec.rb` files, manually
# require only the support files necessary.
#
# Dir[Rails.root.join('spec', 'support', '**', '*.rb')].sort.each { |f| require f }

require 'spec_helper' # Always require spec_helper first
require 'simplecov'
SimpleCov.start 'rails' # Start SimpleCov at the very top of rails_helper.rb

ENV['RAILS_ENV'] ||= 'test'
require_relative '../config/environment'
# Prevent database truncation if the environment is production
abort("The Rails environment is running in production mode!") if Rails.env.production?
require 'rspec/rails'

# Add additional requires below this line. Rails is not loaded until this point!
require 'capybara/rails'
require 'webdrivers' # Automatically downloads browser drivers
require 'database_cleaner/active_record' # Specific for ActiveRecord
require 'shoulda/matchers'

# Configure Capybara for system/feature tests
Capybara.register_driver :headless_chrome do |app|
  options = Selenium::WebDriver::Chrome::Options.new
  options.add_argument('--headless')
  options.add_argument('--no-sandbox') # Required for CI environments
  options.add_argument('--disable-dev-shm-usage') # Required for CI environments
  options.add_argument('--window-size=1400,1400')
  Capybara::Selenium::Driver.new(app, browser: :chrome, options: options)
end

Capybara.javascript_driver = :headless_chrome
Capybara.default_driver = :rack_test # Default for request/controller specs (no JS)

# Configure Shoulda Matchers
Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end

# RSpec.configure block for rails_helper.rb
RSpec.configure do |config|
  # Uncomment this line if you are using ActiveRecord fixtures
  config.fixture_paths = [
    Rails.root.join('spec/fixtures')
  ]

  # If you're not using ActiveRecord, or you'd prefer not to run each example in a transaction,
  # remove the following line or assign false to the `use_active_record` config option.
  config.use_transactional_fixtures = true # Use transactions for faster tests

  # Configure DatabaseCleaner
  config.before(:suite) do
    DatabaseCleaner.clean_with(:truncation) # Clean database before the test suite runs
  end

  config.before(:each) do
    DatabaseCleaner.strategy = :transaction # Use transactions for most tests
  end

  config.before(:each, type: :feature) do
    # Driver for Capybara browser tests
    DatabaseCleaner.strategy = :truncation # Truncation for feature tests
  end

  config.before(:each, type: :system) do # For Rails 6+ System Tests
    DatabaseCleaner.strategy = :truncation
  end

  config.before(:each) do
    DatabaseCleaner.start
  end

  config.after(:each) do
    DatabaseCleaner.clean
  end

  # FactoryBot is NOT being used, so this line is removed:
  # config.include FactoryBot::Syntax::Methods

  # If using ActiveRecord fixtures globally (they are auto-loaded if fixture_paths is set),
  # you might use a line like this, though it's typically handled by fixture_paths and transactional_fixtures.
  # config.global_fixtures = :all

  # The settings below are for RSpec Rails and are mostly defaults.
  # See http://rubydoc.info/gems/rspec-rails/RSpec/Rails/Configuration for details.
  config.infer_spec_type_from_file_location!

  # Filter lines from Rails gems in backtraces.
  config.filter_rails_from_backtrace!
  # Arbitrary gems may also be filtered via:
  # config.filter_gems_from_backtrace("gem_name")
end
