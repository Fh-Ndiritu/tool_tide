# frozen_string_literal: true

module Markdownable
  extend ActiveSupport::Concern
  # our goal is to take the json files generated by the basic_ocr.rb and convert them to markdown files
  # we need to render the images and tables in line
  # def convert_to_html(pdf_file_path)
  #   json_file = File.join('outputs/bbox_annotation', "#{File.basename(pdf_file_path, '.pdf')}.json")
  #   json_data = JSON.parse(File.read(json_file))
  #   html_path = json_file.sub('.json', '.html')

  #   # we use kramdown to convert the JSON to HTML
  #   File.open(html_path, 'w') do |file|
  #     add_header(file)
  #     insert_markdown(file, json_data)
  #     add_footer(file)
  #   end
  #   puts "HTML result written to #{html_path}"
  # rescue IOError => e
  #   raise "Failed to write HTML result to file: #{e.message}"
  # end

  # def insert_markdown(file, json_data)
  #   json_data['pages'].each do |page|
  #     markdown = replace_images(page['markdown'], page['images'])
  #     kramdown_markdown = convert_latex_to_kramdown(markdown)
  #     content = Kramdown::Document.new(kramdown_markdown).to_html
  #     file.write("<div class='page'>\n")
  #     file.write(content)
  #     file.write("\n</div>\n")
  #   end
  # end

  def kramdown_markdown(page)
    markdown = replace_images(page["markdown"], page["images"])
    kramdown_markdown = convert_latex_to_kramdown(markdown)
    Kramdown::Document.new(kramdown_markdown).to_html
  end

  def replace_images(markdown, images)
    images.each do |image|
      # base64_image = image["image_base64"]
      id = image["id"]

      # Create an HTML image tag with the base64 encoded image
      # image_tag = "<img src='#{base64_image}' alt='OCR Image'/>"
      image_tag = ""

      # Replace the markdown image reference with the HTML image tag
      # We shall get rid of images for now
      markdown.gsub!("![#{id}](#{id})", image_tag)
    end
    markdown
  rescue StandardError => e
    raise "Failed to replace images in markdown: #{e.message}"
  end

  def convert_latex_to_kramdown(text)
    # Convert inline LaTeX expressions: $...$ to $$...$$
    text = text.gsub(/\$(.*?)\$/, '$$\1$$')

    # Convert block LaTeX expressions: \[...\] to $$...$$ and ensure they are on separate lines
    text.gsub(/\\\[(.*?)\\\]/) do |match|
      "\n$$\n#{$1.strip}\n$$\n"
    end

    text
  end
end
