class Tag < ApplicationRecord
  before_validation :generate_slug, on: [ :create, :update ]
  validates_presence_of :tag_class, :title, :slug
  validates_uniqueness_of :title, { scope: :tag_class }

  has_many :generation_taggings, dependent: :destroy
  has_many :mask_requests, through: :generation_taggings, source: :generation, source_type: "MaskRequest"
  has_many :text_requests, through: :generation_taggings, source: :generation, source_type: "TextRequest"

  enum :tag_class, {
    event: 0,
    season: 1,
    location: 2
  }

  def seo_title
    case tag_class
    when "event"
      "Best #{title} Designs, Ideas & Inspiration | Hadaa AI"
    when "season"
      "Top #{title} Décor Trends, Projects & Plans | Hadaa AI"
    when "location"
      "Local #{title} Design Community & Project Ideas | Hadaa AI"
    else
      "#{title} Designs & Ideas | Generated on Hadaa AI"
    end
  end

  def seo_description
    case tag_class
    when "event"
      "Find unique user-generated projects for your #{title.downcase} celebration. Get inspiration for lighting, arrangements, and party décor, and start designing your vision today!"
    when "season"
      "Discover hundreds of curated seasonal projects for #{title.downcase}. Explore interior design, color palettes, and outdoor transformations to capture the perfect seasonal mood."
    when "location"
      "Explore local, community-sourced design ideas from creators right here in #{title}. See how regional style is shaping homes and submit your own local project!"
    else
      "Explore hundreds of unique compound and garden designs generated by the Hadaa community for #{title.downcase}. Get inspiration and start designing your own landscaping project today!"
    end
  end


  def related_tags_list
    scope = self.class.excluding(self)
    related = scope.where(tag_class: tag_class)

    if related.count > 10
      scope = related.order(Arel.sql("ABS(id - #{id}) ASC"))
    else
     scope = scope.order(
        Arel.sql("CASE WHEN tag_class = '#{self.tag_class}' THEN 0 ELSE 1 END"),
        id: :desc
      )
    end

    scope.limit(10)
  end

  def slug_to_integer
    max_id = 8000
    min_id = 3000
    range_size = max_id - min_id + 1

    checksum = Zlib.crc32(slug.downcase)

    mapped_value = checksum % range_size

    final_id = mapped_value + min_id

    final_id
  end


  private



  def generate_slug
    self.slug = title.parameterize if title.present?
  end
end
