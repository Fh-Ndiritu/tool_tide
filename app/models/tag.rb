class Tag < ApplicationRecord
  before_validation :generate_slug, on: [ :create, :update ]
  validates_presence_of :tag_class, :title, :slug
  validates_uniqueness_of :title, { scope: :tag_class }

  has_many :generation_taggings, dependent: :destroy
  has_many :generations, through: :generation_taggings, source: :generation

  enum :tag_class, {
    event: 0,
    season: 1,
    location: 2
  }

  def seo_title
    read_attribute(:seo_title).presence || "#{title} Designs & Ideas | Generated on Hadaa AI"
  end

  def seo_description
    read_attribute(:seo_description).presence || "Explore hundreds of unique compound and garden designs generated by the Hadaa community for #{title.downcase}. Get inspiration and start designing your own landscaping project today!"
  end

  def related_tags_list
    self.class.excluding(self).where(created_at: created_at.., tag_class: read_attribute(:tag_class)).limit(10)
  end

  def slug_to_integer
    max_id = 8000
    min_id = 3000
    range_size = max_id - min_id + 1

    checksum = Zlib.crc32(slug.downcase)

    mapped_value = checksum % range_size

    final_id = mapped_value + min_id

    final_id
  end


  private



  def generate_slug
    self.slug = title.parameterize if title.present?
  end
end
